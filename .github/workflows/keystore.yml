name: PREVISION CI

on:
  pull_request:
    branches: [ main ]  # Trigger for PRs to main branch

env:
  MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      

jobs:
  android_build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Generate google-services.json
      env:
        GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      run: |
        echo "$GOOGLE_SERVICES_JSON" > google-services.json
        mkdir -p android/app/src  
        mv google-services.json android/app/src
    
    - name: Install Node.js
      uses: actions/setup-node@v1
      with:
        node-version: 18.x

    - name: Install dependencies
      run: npm install -g yarn

    - name: Install dependencies
      run: yarn install

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'oracle' 
        java-version: '17'
        
    - name: Run Jetify
      run: npx jetify

    - name: Cache Gradle Wrapper
      uses: actions/cache@v2
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

    - name: Cache Gradle Dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-caches-
    - name: Make Gradlew Executable
      run: cd android && chmod +x ./gradlew

    - name: Generate release keystore
      run: |
        echo "$ANDROID_RELEASE_KEYSTORE" > release.keystore.asc
        gpg -d --passphrase "$ANDROID_KEYSTORE_PASSWORD" --batch release.keystore.asc > android/app/release.keystore

    - name: Build Android
      run: cd android && ./gradlew assembleDebug

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
          ruby-version: '2.7.4'

    - name: Setup Fastlane
      working-directory: ./android
      run: bundle install

    - name: Install Fastlane
      working-directory: ./android
      run:  fastlane beta

  ios_build:
    runs-on: macOS-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - uses: maxim-lobanov/setup-xcode@v1
      with:
          xcode-version: latest-stable

    - name: Install dependencies
      run: npm install -g yarn

    - name: Install Yarn
      run: yarn install

    - name: Install CocoaPods
      run: sudo gem install cocoapods

    - name: Install Pods
      run: cd ios && pod install

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
          ruby-version: '2.7.4'

    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Setup Fastlane
      run:  cd ios && bundle install

    - name: Install Fastlane
      run:  cd ios && fastlane beta
